package com.spring.mvc.judiciary.service.dataManager;

import com.spring.mvc.auth.dto.UserRolePrivilegeDto;
import com.spring.mvc.enumeration.ServiceTypeEnum;
import com.spring.mvc.enumeration.SystemDataInt;
import com.spring.mvc.helper.ResponseMessage;
import com.spring.mvc.judiciary.dao.CommonDao;
import com.spring.mvc.judiciary.dto.*;
import com.spring.mvc.judiciary.entity.ChildMcDetail;
import com.spring.mvc.judiciary.entity.FileAttachment;
import com.spring.mvc.judiciary.service.commonService.CommonService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;


/**
 * Created by Sonam Tobgay on 4/14/2020.
 */
@Service
public class UpdateMarriageCertificateService {
    @Autowired
    private CommonService commonService;

    @Autowired
    private CommonDao commonDao;

    Calendar calendar = Calendar.getInstance();

    Integer currentYear = Integer.valueOf(this.calendar.get(1));

    public ResponseMessage updateApplication(UserRolePrivilegeDto userBean, ApplicationDetailDTO applicationDetailDTO, ApplicantDetailDTO applicantDetailDTO, SpouseDetailsDTO spouseDetailsDTO) {
        ResponseMessage responseMessage = this.commonService.updateApplicationMC(userBean, applicationDetailDTO, applicantDetailDTO, spouseDetailsDTO);
        responseMessage.setApplicationNumber(applicationDetailDTO.getApplicationNo());
        responseMessage.setServiceName(ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceName());
        return responseMessage;
    }

    @Transactional(rollbackFor = {Exception.class})
    public ResponseMessage saveMarriageCertificate(HttpServletRequest request, ApplicationDetailDTO applicationDetailDTO, ApplicantDetailDTO applicantDetailDTO, WitnessDetailDTO witnessDetailDTO, SpouseDetailsDTO spouseDetailsDTO) throws IOException, ParseException {
        ResponseMessage responseMessage = new ResponseMessage();
        Integer globalServiceTypeId = ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceTypeId();
        String applicationType = ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceCode();
        String applicationNo = this.commonService.generateApplicationNumber(globalServiceTypeId, applicationType);
        Integer courtId = applicationDetailDTO.getCourtId();
        String courtName = this.commonService.getCourtName(Integer.toString(courtId.intValue()));
        applicationDetailDTO.setApplicationNo(applicationNo);
        applicantDetailDTO.setApplicationNo(applicationNo);
        String applicationYear = this.currentYear.toString().substring(2, 4);
        applicantDetailDTO.setApplicationYear(applicationYear);
        applicationDetailDTO.setApplicationYear(applicationYear);
        witnessDetailDTO.setApplicationNo(applicationNo);
        spouseDetailsDTO.setApplicationNo(applicationNo);
        applicationDetailDTO.setServiceSlNo(globalServiceTypeId);
        String serviceName = ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceName();
        this.commonService.saveApplication(applicationDetailDTO, applicantDetailDTO, witnessDetailDTO, spouseDetailsDTO);
        if (!((ChildMCDTO)applicationDetailDTO.getChildMCDTOs().get(0)).getChildName().equalsIgnoreCase("")) {
            Integer iterator1 = Integer.valueOf(0);
            ChildMcDetail childMcDetail = new ChildMcDetail();
            for (ChildMCDTO childMCDTO : applicationDetailDTO.getChildMCDTOs()) {
                iterator1 = Integer.valueOf(iterator1.intValue() + 1);
                childMcDetail.setApplicationNo(applicationNo);
                childMcDetail.setChildName(childMCDTO.getChildName());
                childMcDetail.setChildDoB(childMCDTO.getChildDoB());
                childMcDetail.setChildGender(childMCDTO.getChildGender());
                this.commonDao.saveChildMcDetail(childMcDetail);
            }
        }
        responseMessage.setResponseStatus(Integer.valueOf(SystemDataInt.MESSAGE_STATUS_SUCCESSFUL.value()));
        responseMessage.setApplicationNumber(applicationNo);
        responseMessage.setCourtName(courtName);
        responseMessage.setServiceName(ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceName());
        responseMessage.setResponseText("Updated successfully for " + ServiceTypeEnum.MARRIAGE_CERTIFICATE.getServiceName() + ". The application number generated by system is " + applicationNo);
        return responseMessage;
    }

    private FileAttachment convertFileAttachmentEntToDTO(FileAttachmentDTO fileAttachmentDTO) {
        FileAttachment fileAttachment = new FileAttachment();
        fileAttachment.setDocumentId(fileAttachmentDTO.getDocumentId());
        fileAttachment.setDocumentTypeId(fileAttachmentDTO.getDocumentTypeId());
        fileAttachment.setApplicationNo(fileAttachmentDTO.getApplicationNo());
        fileAttachment.setDocumentType(fileAttachmentDTO.getDocumentType());
        fileAttachment.setDocumentName(fileAttachmentDTO.getDocumentName());
        fileAttachment.setUploadUrl(fileAttachmentDTO.getUploadUrl());
        fileAttachment.setUuId(fileAttachmentDTO.getUuId());
        return fileAttachment;
    }
}